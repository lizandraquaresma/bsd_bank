// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint
import 'dart:convert';

class StatementModel {
  final String id;
  final int agencyNumber;
  final String accountNumber;
  final String cpf;
  final String name;
  final double amount;
  final DateTime date;
  const StatementModel({
    this.id = '',
    this.agencyNumber = 0,
    this.accountNumber = '',
    this.cpf = '',
    this.name = '',
    this.amount = 0.0,
    required this.date,
  });

  StatementModel copyWith({
    String? id,
    int? agencyNumber,
    String? accountNumber,
    String? cpf,
    String? name,
    double? amount,
    DateTime? date,
  }) {
    return StatementModel(
      id: id ?? this.id,
      agencyNumber: agencyNumber ?? this.agencyNumber,
      accountNumber: accountNumber ?? this.accountNumber,
      cpf: cpf ?? this.cpf,
      name: name ?? this.name,
      amount: amount ?? this.amount,
      date: date ?? this.date,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'agencyNumber': agencyNumber,
      'accountNumber': accountNumber,
      'cpf': cpf,
      'name': name,
      'amount': amount,
      'date': date.toUtc().toIso8601String(),
    };
  }

  factory StatementModel.fromMap(Map<String, dynamic> map) {
     T cast<T>(String k) => map[k] is T ? map[k] as T : throw ArgumentError.value(map[k], k, '$T ‚Üê ${map[k].runtimeType}');
    return StatementModel(
      id: cast<String>('id'),
      agencyNumber: cast<num>('agencyNumber').toInt(),
      accountNumber: cast<String>('accountNumber'),
      cpf: cast<String>('cpf'),
      name: cast<String>('name'),
      amount: cast<num>('amount').toDouble(),
      date: DateTime.parse(cast<String>('date')),
    );
  }

  String toJson() => json.encode(toMap());

  factory StatementModel.fromJson(String source) =>
      StatementModel.fromMap(json.decode(source) as Map<String, dynamic>);

  @override
  String toString() {
    return 'StatementModel(id: $id, agencyNumber: $agencyNumber, accountNumber: $accountNumber, cpf: $cpf, name: $name, amount: $amount, date: $date)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
  
    return other is StatementModel &&
      other.id == id &&
      other.agencyNumber == agencyNumber &&
      other.accountNumber == accountNumber &&
      other.cpf == cpf &&
      other.name == name &&
      other.amount == amount &&
      other.date == date;
  }

  @override
  int get hashCode {
    return id.hashCode ^
      agencyNumber.hashCode ^
      accountNumber.hashCode ^
      cpf.hashCode ^
      name.hashCode ^
      amount.hashCode ^
      date.hashCode;
  }
}
